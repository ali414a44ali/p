import time
import math
from pyrogram.types import InlineKeyboardButton
from VeGa.utils.formatters import time_to_seconds

LAST_UPDATE_TIME = {}
SCROLL_POSITION = {}  # لتتبع موضع التمرير لكل دردشة

def track_markup(_, videoid, user_id, channel, fplay):
    return [
        [
            InlineKeyboardButton(
                text=_["P_B_1"],
                callback_data=f"MusicStream {videoid}|{user_id}|a|{channel}|{fplay}",
            ),
            InlineKeyboardButton(
                text=_["P_B_2"],
                callback_data=f"MusicStream {videoid}|{user_id}|v|{channel}|{fplay}",
            ),
        ],
        [
            InlineKeyboardButton(
                text=_["CLOSE_BUTTON"],
                callback_data=f"forceclose {videoid}|{user_id}"
            )
        ],
    ]

def get_scrolling_text(text, position, width=20):
    if len(text) <= width:
        spaces = (width - len(text)) // 2
        return " " * spaces + text + " " * spaces
    else:
        extended_text = text + " " * width
        start = position % (len(text) + width)
        return extended_text[start:start+width]

def get_progress_bare(percentage, chat_id):
    umm = math.floor(percentage)
    
    texts = {
        10: "🎵 الموسيقى نبض الروح",
        20: "᪥ لحن الحياة هو فيجا ᪥",
        30: "🎧 الموسيقى صديقة الروح",
        40: "☘نغم يلامس القلب من فيجا☘",
        50: "🎺 الموسيقى سر الوجود ┃",
        60: "🎼 أنغام تبحث عن قلب",
        70: "🎻 الموسيقى دواء الروح",
        80: "🎷 أنغام لا تنتهي",
        90: "☙ الموسيقى ترياق الروح",
        100: "🎸 الروح تغني مع فيجا"
    }
    
    
    bare_text = "᪥ لحن الحياة هو فيجا ᪥"  
    for threshold, text in texts.items():
        if umm <= threshold:
            bare_text = text
            break
    
    if chat_id not in SCROLL_POSITION:
        SCROLL_POSITION[chat_id] = 0
    else:
        SCROLL_POSITION[chat_id] += 1
    
    return get_scrolling_text(bare_text, SCROLL_POSITION[chat_id])

def should_update_progress(chat_id):
    now = time.time()
    last = LAST_UPDATE_TIME.get(chat_id, 0)
    if now - last >= 3:  
        LAST_UPDATE_TIME[chat_id] = now
        return True
    return False

def generate_progress_bar(played_sec, duration_sec):
    if duration_sec == 0:
        return "▱▱▱▱▱▱▱▱"
    
    percentage = min((played_sec / duration_sec) * 100, 100)
    filled = int(round(8 * percentage / 100))
    return "▰" * filled + "▱" * (8 - filled)

def get_moving_time(played, dur, position, width=15):
    time_text = f"{played} | {dur}"
    if len(time_text) <= width:
        return time_text
    extended_text = time_text + " " * width
    start = position % (len(time_text) + width)
    return extended_text[start:start+width]

def control_buttons(_, chat_id, percentage=0):
    bare = get_progress_bare(percentage, chat_id)
    return [
        [
            InlineKeyboardButton(text="▷", callback_data=f"ADMIN Resume|{chat_id}"),
            InlineKeyboardButton(text="II", callback_data=f"ADMIN Pause|{chat_id}"),
            InlineKeyboardButton(text="↻", callback_data=f"ADMIN Replay|{chat_id}"),
            InlineKeyboardButton(text="‣‣I", callback_data=f"ADMIN Skip|{chat_id}"),
            InlineKeyboardButton(text="▢", callback_data=f"ADMIN Stop|{chat_id}"),
        ],
        [
            InlineKeyboardButton(
                text=f"{bare}",
                callback_data="GetTimer",
            )
        ],
    ]

def stream_markup_timer(_, chat_id, played, dur):
    if not should_update_progress(chat_id):
        return None

    played_sec = time_to_seconds(played)
    duration_sec = time_to_seconds(dur)
    percentage = (played_sec / duration_sec) * 100 if duration_sec > 0 else 0
    
    bar = generate_progress_bar(played_sec, duration_sec)
    bare = get_progress_bare(percentage, chat_id)
    moving_time = get_moving_time(played, dur, SCROLL_POSITION.get(chat_id, 0))
    
    return [
        [InlineKeyboardButton(text=f"{played} ┃{bar}┃ {dur}", callback_data="GetTimer")],
        *control_buttons(_, chat_id, percentage),

    ]

# بقية الدوال تبقى كما هي بدون تغيير (stream_markup, playlist_markup, livestream_markup, slider_markup)


def stream_markup(_, chat_id):
    buttons = control_buttons(_, chat_id)
    
    return buttons


def playlist_markup(_, videoid, user_id, ptype, channel, fplay):
    return [
        [
            InlineKeyboardButton(
                text=_["P_B_1"],
                callback_data=f"AnniePlaylists {videoid}|{user_id}|{ptype}|a|{channel}|{fplay}"
            ),
            InlineKeyboardButton(
                text=_["P_B_2"],
                callback_data=f"AnniePlaylists {videoid}|{user_id}|{ptype}|v|{channel}|{fplay}"
            ),
        ],
        [
            InlineKeyboardButton(
                text=_["CLOSE_BUTTON"],
                callback_data=f"forceclose {videoid}|{user_id}"
            ),
        ],
    ]


def livestream_markup(_, videoid, user_id, mode, channel, fplay):
    return [
        [
            InlineKeyboardButton(
                text=_["P_B_3"],
                callback_data=f"LiveStream {videoid}|{user_id}|{mode}|{channel}|{fplay}",
            )
        ],
        [
            InlineKeyboardButton(
                text=_["CLOSE_BUTTON"],
                callback_data=f"forceclose {videoid}|{user_id}"
            )
        ],
    ]


def slider_markup(_, videoid, user_id, query, query_type, channel, fplay):
    short_query = query[:20]
    return [
        [
            InlineKeyboardButton(
                text=_["P_B_1"],
                callback_data=f"MusicStream {videoid}|{user_id}|a|{channel}|{fplay}",
            ),
            InlineKeyboardButton(
                text=_["P_B_2"],
                callback_data=f"MusicStream {videoid}|{user_id}|v|{channel}|{fplay}",
            ),
        ],
        [
            InlineKeyboardButton(
                text="◁",
                callback_data=f"slider B|{query_type}|{short_query}|{user_id}|{channel}|{fplay}",
            ),
            InlineKeyboardButton(
                text=_["CLOSE_BUTTON"],
                callback_data=f"forceclose {short_query}|{user_id}",
            ),
            InlineKeyboardButton(
                text="▷",
                callback_data=f"slider F|{query_type}|{short_query}|{user_id}|{channel}|{fplay}",
            ),
        ],
    ]